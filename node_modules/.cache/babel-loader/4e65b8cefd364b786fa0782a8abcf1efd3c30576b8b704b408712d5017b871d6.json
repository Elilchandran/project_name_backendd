{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useContent = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const auth = localStorage.getItem('isAuthenticated');\n    return auth ? JSON.parse(auth) : false;\n  });\n  const [user, setUser] = useState({\n    id: null\n  }); // Introducing user state\n\n  const handleLogin = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:3001/signin', {\n        email,\n        password\n      });\n      if (response.status === 200) {\n        const result = response.data;\n        if (result.message === 'Sign-in successful') {\n          setIsAuthenticated(true);\n          localStorage.setItem('isAuthenticated', true);\n          setUser({\n            id: result.userId\n          }); // Set the user ID in state\n        } else {\n          console.error('Unexpected response:', result.message);\n        }\n      } else {\n        console.error('HTTP error:', response.status);\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    localStorage.removeItem('isAuthenticated');\n    setUser({\n      id: null\n    }); // Reset the user ID on logout\n  };\n\n  useEffect(() => {\n    const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\n    if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\n      setIsAuthenticated(true);\n      // You may need to fetch user data based on the authenticated user\n      // setUser({ id: userIdFromBackend });\n    }\n  }, []);\n  return {\n    isAuthenticated,\n    handleLogin,\n    handleLogout,\n    user\n  };\n};\n_s(useContent, \"LhweQ3j1C4fKneJvYykRS4HfF1A=\");\nexport default useContent;","map":{"version":3,"names":["useState","useEffect","axios","useContent","_s","isAuthenticated","setIsAuthenticated","auth","localStorage","getItem","JSON","parse","user","setUser","id","handleLogin","email","password","response","post","status","result","data","message","setItem","userId","console","error","removeItem","handleLogout","storedIsAuthenticated"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/useContent.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useContent = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n    const auth = localStorage.getItem('isAuthenticated');\r\n    return auth ? JSON.parse(auth) : false;\r\n  });\r\n\r\n  const [user, setUser] = useState({ id: null }); // Introducing user state\r\n\r\n  const handleLogin = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/signin', {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const result = response.data;\r\n        if (result.message === 'Sign-in successful') {\r\n          setIsAuthenticated(true);\r\n          localStorage.setItem('isAuthenticated', true);\r\n          setUser({ id: result.userId }); // Set the user ID in state\r\n        } else {\r\n          console.error('Unexpected response:', result.message);\r\n        }\r\n      } else {\r\n        console.error('HTTP error:', response.status);\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('isAuthenticated');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('isAuthenticated');\r\n    setUser({ id: null }); // Reset the user ID on logout\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\r\n    if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\r\n      setIsAuthenticated(true);\r\n      // You may need to fetch user data based on the authenticated user\r\n      // setUser({ id: userIdFromBackend });\r\n    }\r\n  }, []);\r\n\r\n  return { isAuthenticated, handleLogin, handleLogout, user };\r\n};\r\n\r\nexport default useContent;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,MAAM;IAC3D,MAAMO,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACpD,OAAOF,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,KAAK;EACxC,CAAC,CAAC;EAEF,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC;IAAEc,EAAE,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;;EAEhD,MAAMC,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,8BAA8B,EAAE;QAChEH,KAAK;QACLC;MACF,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,MAAM,GAAGH,QAAQ,CAACI,IAAI;QAC5B,IAAID,MAAM,CAACE,OAAO,KAAK,oBAAoB,EAAE;UAC3CjB,kBAAkB,CAAC,IAAI,CAAC;UACxBE,YAAY,CAACgB,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;UAC7CX,OAAO,CAAC;YAAEC,EAAE,EAAEO,MAAM,CAACI;UAAO,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEN,MAAM,CAACE,OAAO,CAAC;QACvD;MACF,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,aAAa,EAAET,QAAQ,CAACE,MAAM,CAAC;QAC7Cd,kBAAkB,CAAC,KAAK,CAAC;QACzBE,YAAY,CAACoB,UAAU,CAAC,iBAAiB,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBvB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,YAAY,CAACoB,UAAU,CAAC,iBAAiB,CAAC;IAC1Cf,OAAO,CAAC;MAAEC,EAAE,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC;;EAEDb,SAAS,CAAC,MAAM;IACd,MAAM6B,qBAAqB,GAAGtB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACrE,IAAIqB,qBAAqB,IAAIpB,IAAI,CAACC,KAAK,CAACmB,qBAAqB,CAAC,KAAK,IAAI,EAAE;MACvExB,kBAAkB,CAAC,IAAI,CAAC;MACxB;MACA;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAED,eAAe;IAAEU,WAAW;IAAEc,YAAY;IAAEjB;EAAK,CAAC;AAC7D,CAAC;AAACR,EAAA,CAlDID,UAAU;AAoDhB,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}