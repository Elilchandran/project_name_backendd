{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karthik\\\\Documents\\\\student_task\\\\student_portal\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Import necessary modules and components from React and react-router-dom\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport NavBar from \"./component/NavBar\";\nimport './index.css';\nimport './App.css';\nimport SideBar from \"./component/Utilities/SideBar\";\nimport MainBar from \"./component/MainBar\";\nimport Login from \"./component/Login\";\nimport Register from \"./component/Register\";\nimport ForgetPs from \"./component/ForgetPs\";\nimport MyChart from \"./component/MyChart\";\nimport BarChart from \"./component/BarChart\";\nimport Dashboard from \"./component/Dashboard\";\nimport Task from \"./component/Task\";\nimport Class from \"./component/Class\";\nimport Syllubus from \"./component/Syllubus\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Define a state variable isSidebarOpen to manage the state of the sidebar\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  // Function to toggle the sidebar\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  // Use the useEffect hook to update the classes on the body element when the sidebar state changes\n  useEffect(() => {\n    // Always add 'sb-nav-fixed' class to the body\n    document.body.classList.toggle('sb-nav-fixed', true);\n    // Conditionally add/remove 'sb-sidenav-toggled' class based on isSidebarOpen\n    document.body.classList.toggle('sb-sidenav-toggled', isSidebarOpen);\n  }, [isSidebarOpen]);\n\n  // Check if the current path is one of the login, register, or forgetps routes\n  // This is used to determine whether to show the sidebar\n  const shouldShowSidebar = !['/login', '/register', '/forgetps'].includes(window.location.pathname);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [shouldShowNavBar() &&\n    /*#__PURE__*/\n    // Render the navigation bar (NavBar) if the current route doesn't match login, register, or forgetps\n    _jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(NavBar, {\n        toggleSidebar: toggleSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"layoutSidenav\",\n      children: [shouldShowSidebar &&\n      /*#__PURE__*/\n      // Render the sidebar (SideBar) if the current route doesn't match login, register, or forgetps\n      _jsxDEV(\"div\", {\n        id: \"layoutSidenav_nav\",\n        children: /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"layoutSidenav_content\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/dashboard\",\n            element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 59\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/barchart\",\n            element: /*#__PURE__*/_jsxDEV(BarChart, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/mychart\",\n            element: /*#__PURE__*/_jsxDEV(MyChart, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/task\",\n            element: /*#__PURE__*/_jsxDEV(Task, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/class\",\n            element: /*#__PURE__*/_jsxDEV(Class, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/syllubus\",\n            element: /*#__PURE__*/_jsxDEV(Syllubus, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/register\",\n            element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/forgetps\",\n            element: /*#__PURE__*/_jsxDEV(ForgetPs, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n// Function to determine whether the navigation bar should be displayed based on the current route\n_s(App, \"9L0iMvlxgzpFN/wVDxp74SfSydw=\");\n_c = App;\nfunction shouldShowNavBar() {\n  return !window.location.pathname.includes('/login') && !window.location.pathname.includes('/register') && !window.location.pathname.includes('/forgetps');\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","NavBar","SideBar","MainBar","Login","Register","ForgetPs","MyChart","BarChart","Dashboard","Task","Class","Syllubus","jsxDEV","_jsxDEV","App","_s","isSidebarOpen","setIsSidebarOpen","toggleSidebar","document","body","classList","toggle","shouldShowSidebar","includes","window","location","pathname","children","shouldShowNavBar","fileName","_jsxFileName","lineNumber","columnNumber","id","path","element","_c","$RefreshReg$"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/App.js"],"sourcesContent":["// Import necessary modules and components from React and react-router-dom\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport NavBar from \"./component/NavBar\";\nimport './index.css'\nimport './App.css'\nimport SideBar from \"./component/Utilities/SideBar\";\nimport MainBar from \"./component/MainBar\";\nimport Login from \"./component/Login\";\nimport Register from \"./component/Register\";\nimport ForgetPs from \"./component/ForgetPs\";\nimport MyChart from \"./component/MyChart\";\nimport BarChart from \"./component/BarChart\";\nimport Dashboard from \"./component/Dashboard\";\nimport Task from \"./component/Task\";\nimport Class from \"./component/Class\";\nimport Syllubus from \"./component/Syllubus\";\n\nfunction App() {\n    // Define a state variable isSidebarOpen to manage the state of the sidebar\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n    \n    // Function to toggle the sidebar\n    const toggleSidebar = () => {\n        setIsSidebarOpen(!isSidebarOpen);\n    };\n\n    // Use the useEffect hook to update the classes on the body element when the sidebar state changes\n    useEffect(() => {\n        // Always add 'sb-nav-fixed' class to the body\n        document.body.classList.toggle('sb-nav-fixed', true);\n        // Conditionally add/remove 'sb-sidenav-toggled' class based on isSidebarOpen\n        document.body.classList.toggle('sb-sidenav-toggled', isSidebarOpen);\n    }, [isSidebarOpen]);\n\n    // Check if the current path is one of the login, register, or forgetps routes\n    // This is used to determine whether to show the sidebar\n    const shouldShowSidebar = !['/login', '/register', '/forgetps'].includes(window.location.pathname);\n\n    return (\n        <Router>\n            {shouldShowNavBar() && (\n                // Render the navigation bar (NavBar) if the current route doesn't match login, register, or forgetps\n                <nav>\n                    <NavBar toggleSidebar={toggleSidebar} />\n                </nav>\n            )}\n\n            <div id=\"layoutSidenav\">\n                {shouldShowSidebar && (\n                    // Render the sidebar (SideBar) if the current route doesn't match login, register, or forgetps\n                    <div id=\"layoutSidenav_nav\">\n                        <SideBar />\n                    </div>\n                )}\n\n                <div id=\"layoutSidenav_content\">\n                    {/* Define the routes using react-router's Routes and Route components */}\n                    <Routes>\n                        <Route path=\"/\" element={<MainBar />} />\n                        <Route path=\"/dashboard\" element={<Dashboard />} />\n                        <Route path=\"/barchart\" element={<BarChart />} />\n                        <Route path=\"/mychart\" element={<MyChart />} />\n                        <Route path=\"/task\" element={<Task />} />\n                        <Route path=\"/class\" element={<Class />} />\n                        <Route path=\"/syllubus\" element={<Syllubus />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route path=\"/register\" element={<Register />} />\n                        <Route path=\"/forgetps\" element={<ForgetPs />} />\n                    </Routes>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\n// Function to determine whether the navigation bar should be displayed based on the current route\nfunction shouldShowNavBar() {\n    return !window.location.pathname.includes('/login') &&\n           !window.location.pathname.includes('/register') &&\n           !window.location.pathname.includes('/forgetps');\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}