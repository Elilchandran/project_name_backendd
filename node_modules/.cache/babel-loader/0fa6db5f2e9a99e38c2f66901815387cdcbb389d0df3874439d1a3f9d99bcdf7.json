{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karthik\\\\Documents\\\\student_task\\\\student_portal\\\\src\\\\component\\\\Dbarchart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dbarchart({\n  tasks,\n  handleEdit,\n  handleDelete\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n\n  // Function to calculate the values for the chart dataset\n  const calculateChartValues = tasks => {\n    const completedTasks = tasks.filter(task => task.task === 'completed').length;\n    const remainingTasks = tasks.filter(task => task.task === 'remaining').length;\n    const totalTasks = completedTasks + remainingTasks;\n    return [completedTasks, remainingTasks, totalTasks];\n  };\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    const chartData = calculateChartValues(tasks);\n    const data = {\n      labels: ['Task Completed', 'Balance Task', 'Total Task '],\n      datasets: [{\n        label: 'Task',\n        data: chartData,\n        backgroundColor: ['#772F67', '#FFCA3E', '#619ED6'],\n        hoverOffset: 4\n      }]\n    };\n    const config = {\n      type: 'doughnut',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n\n    // Create the new Chart instance\n    chartInstanceRef.current = new Chart(ctx, config);\n    return () => {\n      // Clean up on component unmount\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-chart-pie me-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), \"Task Status Chart\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef,\n        id: \"doughnutChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-footer small text-muted\",\n      children: \"Updated yesterday at 11:59 PM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Dbarchart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = Dbarchart;\nexport default Dbarchart;\nvar _c;\n$RefreshReg$(_c, \"Dbarchart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","Dbarchart","tasks","handleEdit","handleDelete","_s","chartRef","chartInstanceRef","calculateChartValues","completedTasks","filter","task","length","remainingTasks","totalTasks","ctx","current","getContext","chartData","data","labels","datasets","label","backgroundColor","hoverOffset","config","type","options","responsive","maintainAspectRatio","destroy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","ref","id","_c","$RefreshReg$"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/component/Dbarchart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction Dbarchart({ tasks, handleEdit, handleDelete }) {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  // Function to calculate the values for the chart dataset\r\n  const calculateChartValues = (tasks) => {\r\n    const completedTasks = tasks.filter((task) => task.task === 'completed').length;\r\n    const remainingTasks = tasks.filter((task) => task.task === 'remaining').length;\r\n    const totalTasks = completedTasks + remainingTasks;\r\n\r\n    return [completedTasks, remainingTasks, totalTasks];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n    const chartData = calculateChartValues(tasks);\r\n\r\n    const data = {\r\n      labels: ['Task Completed', 'Balance Task', 'Total Task '],\r\n      datasets: [\r\n        {\r\n          label: 'Task',\r\n          data: chartData,\r\n          backgroundColor: ['#772F67', '#FFCA3E', '#619ED6'],\r\n          hoverOffset: 4,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const config = {\r\n      type: 'doughnut',\r\n      data: data,\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n      },\r\n    };\r\n\r\n    // Create the new Chart instance\r\n    chartInstanceRef.current = new Chart(ctx, config);\r\n\r\n    return () => {\r\n      // Clean up on component unmount\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n      }\r\n    };\r\n  }, [tasks]);\r\n\r\n  return (\r\n    <div className=\"card mb-4\">\r\n      <div className=\"card-header\">\r\n        <i className=\"fas fa-chart-pie me-1\"></i>\r\n        Task Status Chart\r\n      </div>\r\n      <div className=\"card-body\" style={{ height: '400px' }}>\r\n        <canvas ref={chartRef} id=\"doughnutChart\"></canvas>\r\n      </div>\r\n      <div className=\"card-footer small text-muted\">Updated yesterday at 11:59 PM</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dbarchart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}