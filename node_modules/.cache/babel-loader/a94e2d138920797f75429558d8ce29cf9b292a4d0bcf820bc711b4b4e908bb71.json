{"ast":null,"code":"var _s = $RefreshSig$();\n// useContent.js\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nconst useContent = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const auth = localStorage.getItem('isAuthenticated');\n    return auth ? JSON.parse(auth) : false;\n  });\n  const navigate = useNavigate(); // Define navigate hook in the useContent\n\n  const handleLogin = async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:3001/signin\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', true);\n        navigate('/dashboard');\n      } else {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        // Show an error message or handle unsuccessful login\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    localStorage.removeItem('isAuthenticated');\n    navigate('/logout');\n  };\n  useEffect(() => {\n    const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\n    if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  return {\n    isAuthenticated,\n    handleLogin,\n    handleLogout\n  };\n};\n_s(useContent, \"ECuPagSgTiMe0tiy4tfkHp0yR0c=\", false, function () {\n  return [useNavigate];\n});\nexport default useContent;","map":{"version":3,"names":["useState","useEffect","useNavigate","useContent","_s","isAuthenticated","setIsAuthenticated","auth","localStorage","getItem","JSON","parse","navigate","handleLogin","email","password","response","fetch","method","headers","body","stringify","ok","setItem","removeItem","error","console","handleLogout","storedIsAuthenticated"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/useContent.js"],"sourcesContent":["// useContent.js\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst useContent = () => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n        const auth = localStorage.getItem('isAuthenticated');\r\n        return auth ? JSON.parse(auth) : false;\r\n    });\r\n    const navigate = useNavigate(); // Define navigate hook in the useContent\r\n\r\n    const handleLogin = async (email, password) => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:3001/signin\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setIsAuthenticated(true);\r\n                localStorage.setItem('isAuthenticated', true);\r\n                navigate('/dashboard');\r\n            } else {\r\n                setIsAuthenticated(false);\r\n                localStorage.removeItem('isAuthenticated');\r\n                // Show an error message or handle unsuccessful login\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n        }\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('isAuthenticated');\r\n        navigate('/logout');\r\n    };\r\n\r\n    useEffect(() => {\r\n        const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\r\n        if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    return { isAuthenticated, handleLogin, handleLogout };\r\n};\r\n\r\nexport default useContent;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACzD,MAAMO,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACpD,OAAOF,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,KAAK;EAC1C,CAAC,CAAC;EACF,MAAMK,QAAQ,GAAGV,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMW,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC3C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEV,IAAI,CAACW,SAAS,CAAC;UAAEP,KAAK;UAAEC;QAAS,CAAC;MAC5C,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACM,EAAE,EAAE;QACbhB,kBAAkB,CAAC,IAAI,CAAC;QACxBE,YAAY,CAACe,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;QAC7CX,QAAQ,CAAC,YAAY,CAAC;MAC1B,CAAC,MAAM;QACHN,kBAAkB,CAAC,KAAK,CAAC;QACzBE,YAAY,CAACgB,UAAU,CAAC,iBAAiB,CAAC;QAC1C;MACJ;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACvBrB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,YAAY,CAACgB,UAAU,CAAC,iBAAiB,CAAC;IAC1CZ,QAAQ,CAAC,SAAS,CAAC;EACvB,CAAC;EAEDX,SAAS,CAAC,MAAM;IACZ,MAAM2B,qBAAqB,GAAGpB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACrE,IAAImB,qBAAqB,IAAIlB,IAAI,CAACC,KAAK,CAACiB,qBAAqB,CAAC,KAAK,IAAI,EAAE;MACrEtB,kBAAkB,CAAC,IAAI,CAAC;IAC5B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAED,eAAe;IAAEQ,WAAW;IAAEc;EAAa,CAAC;AACzD,CAAC;AAACvB,EAAA,CA7CID,UAAU;EAAA,QAKKD,WAAW;AAAA;AA0ChC,eAAeC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}