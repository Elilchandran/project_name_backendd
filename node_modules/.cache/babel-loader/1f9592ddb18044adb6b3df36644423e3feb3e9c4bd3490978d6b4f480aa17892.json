{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karthik\\\\Documents\\\\student_task\\\\student_portal\\\\src\\\\component\\\\Dchart.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n// import Chart from 'chart.js/auto';\n\n// function Dchart() {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     // Get the chart canvas element\n//     const ctx = document.getElementById('myChart').getContext('2d');\n\n//     // Check if a chart instance already exists, and if so, destroy it\n//     if (chartRef.current) {\n//       chartRef.current.destroy();\n//     }\n\n//     // Define your data\n//     const data = {\n//       labels: ['January', 'February', 'March', 'April', 'May'],\n//       datasets: [\n//         {\n//           label: 'My Data',\n//           data: [12, 19, 3, 5, 2],\n//           backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1,\n//         },\n//       ],\n//     };\n\n//     // Create the chart\n//     const newChart = new Chart(ctx, {\n//       type: 'bar',\n//       data: data,\n//       options: {\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n\n//     // Store the new chart instance in the ref\n//     chartRef.current = newChart;\n//   }, []);\n\n//   return (\n//     <div>\n//       <canvas id=\"myChart\" width=\"100\" height=\"0\"></canvas>\n//     </div>\n//   );\n// }\n\n// export default Dchart;\nimport React from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dchart() {\n  _s();\n  // Renders a line chart using Chart.js\n  const chartRef = React.useRef(null);\n  const chartInstanceRef = React.useRef(null); // To store the Chart instance\n\n  React.useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Replace with your actual labels\n    const data = {\n      labels: labels,\n      datasets: [{\n        label: 'Year 2023',\n        data: [65, 59, 80, 81, 56, 55, 40],\n        fill: false,\n        borderColor: 'rgb(106, 90, 205)',\n        tension: 0.1\n      }]\n    };\n    const config = {\n      type: 'line',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n\n    // Destroy the previous Chart instance\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    // Create the new Chart instance\n    chartInstanceRef.current = new Chart(ctx, config);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-chart-area me-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), \"Montly Progress Chart\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef,\n        id: \"dailyActivity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-footer small text-muted\",\n      children: \"Updated yesterday at 11:59 PM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(Dchart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = Dchart;\nexport default Dchart;\nvar _c;\n$RefreshReg$(_c, \"Dchart\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","Dchart","_s","chartRef","useRef","chartInstanceRef","useEffect","ctx","current","getContext","labels","data","datasets","label","fill","borderColor","tension","config","type","options","responsive","maintainAspectRatio","destroy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","ref","id","_c","$RefreshReg$"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/component/Dchart.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n// import Chart from 'chart.js/auto';\r\n\r\n// function Dchart() {\r\n//   const chartRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Get the chart canvas element\r\n//     const ctx = document.getElementById('myChart').getContext('2d');\r\n\r\n//     // Check if a chart instance already exists, and if so, destroy it\r\n//     if (chartRef.current) {\r\n//       chartRef.current.destroy();\r\n//     }\r\n\r\n//     // Define your data\r\n//     const data = {\r\n//       labels: ['January', 'February', 'March', 'April', 'May'],\r\n//       datasets: [\r\n//         {\r\n//           label: 'My Data',\r\n//           data: [12, 19, 3, 5, 2],\r\n//           backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n//           borderColor: 'rgba(75, 192, 192, 1)',\r\n//           borderWidth: 1,\r\n//         },\r\n//       ],\r\n//     };\r\n\r\n//     // Create the chart\r\n//     const newChart = new Chart(ctx, {\r\n//       type: 'bar',\r\n//       data: data,\r\n//       options: {\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n\r\n//     // Store the new chart instance in the ref\r\n//     chartRef.current = newChart;\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas id=\"myChart\" width=\"100\" height=\"0\"></canvas>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Dchart;\r\nimport React from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction Dchart() {\r\n   // Renders a line chart using Chart.js\r\n  const chartRef = React.useRef(null);\r\n  const chartInstanceRef = React.useRef(null); // To store the Chart instance\r\n\r\n  React.useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n    const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Replace with your actual labels\r\n    const data = {\r\n      labels: labels,\r\n      datasets: [{\r\n        label: 'Year 2023',\r\n        data: [65, 59, 80, 81, 56, 55, 40],\r\n        fill: false,\r\n        borderColor: 'rgb(106, 90, 205)',\r\n        tension: 0.1\r\n      }]\r\n    };\r\n    const config = {\r\n      type: 'line',\r\n      data: data,\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n      },\r\n    };\r\n\r\n    // Destroy the previous Chart instance\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    // Create the new Chart instance\r\n    chartInstanceRef.current = new Chart(ctx, config);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"card mb-4\">\r\n      <div className=\"card-header\">\r\n        <i className=\"fas fa-chart-area me-1\"></i>\r\n        Montly Progress Chart\r\n      </div>\r\n      <div className=\"card-body\" style={{ height: '400px' }}>\r\n        <canvas ref={chartRef} id=\"dailyActivity\" ></canvas>\r\n      </div>\r\n      <div className=\"card-footer small text-muted\">Updated yesterday at 11:59 PM</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dchart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}