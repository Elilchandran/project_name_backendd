{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karthik\\\\Documents\\\\student_task\\\\student_portal\\\\src\\\\component\\\\Task_status\\\\Dbarchart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dbarchart({\n  taskData\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    if (taskData && chartRef.current) {\n      // Calculate data for the chart based on the task data\n      // Create and configure a Chart instance\n      // Check that chartRef.current is not null\n      const totalTasks = 10; // Set the total number of tasks to 10\n      const completedTasks = taskData.filter(task => task.status === 'completed').length;\n      const balanceTasks = totalTasks - completedTasks;\n      const ctx = chartRef.current.getContext('2d');\n      const data = {\n        labels: ['Balance Task', 'Task Completed'],\n        datasets: [{\n          label: 'Task',\n          data: [balanceTasks, completedTasks],\n          backgroundColor: ['#FFCA3E', '#772F67'],\n          hoverOffset: 4\n        }]\n      };\n      const config = {\n        type: 'doughnut',\n        data: data,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      };\n\n      // Create the new Chart instance\n      chartInstanceRef.current = new Chart(ctx, config);\n    }\n    return () => {\n      // Clean up on component unmount\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [taskData]);\n  return (\n    /*#__PURE__*/\n    // Render a chart using the calculated data\n    _jsxDEV(\"div\", {\n      className: \"card mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chart-pie me-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), \"Task Status Chart\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        style: {\n          height: '400px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef,\n          id: \"doughnutChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-footer small text-muted\",\n        children: \"Updated yesterday at 11:59 PM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Dbarchart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = Dbarchart;\nexport default Dbarchart;\nvar _c;\n$RefreshReg$(_c, \"Dbarchart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","Dbarchart","taskData","_s","chartRef","chartInstanceRef","current","totalTasks","completedTasks","filter","task","status","length","balanceTasks","ctx","getContext","data","labels","datasets","label","backgroundColor","hoverOffset","config","type","options","responsive","maintainAspectRatio","destroy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","ref","id","_c","$RefreshReg$"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/component/Task_status/Dbarchart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction Dbarchart({ taskData }) {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (taskData && chartRef.current) {\r\n        // Calculate data for the chart based on the task data\r\n      // Create and configure a Chart instance\r\n       // Check that chartRef.current is not null\r\n      const totalTasks = 10; // Set the total number of tasks to 10\r\n      const completedTasks = taskData.filter(task => task.status === 'completed').length;\r\n      const balanceTasks = totalTasks - completedTasks;\r\n\r\n      const ctx = chartRef.current.getContext('2d');\r\n      const data = {\r\n        labels: ['Balance Task', 'Task Completed'],\r\n        datasets: [\r\n          {\r\n            label: 'Task',\r\n            data: [balanceTasks, completedTasks],\r\n            backgroundColor: ['#FFCA3E', '#772F67'],\r\n            hoverOffset: 4,\r\n          },\r\n        ],\r\n      };\r\n      const config = {\r\n        type: 'doughnut',\r\n        data: data,\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n        },\r\n      };\r\n\r\n      // Create the new Chart instance\r\n      chartInstanceRef.current = new Chart(ctx, config);\r\n    }\r\n\r\n    return () => {\r\n      // Clean up on component unmount\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n      }\r\n    };\r\n  }, [taskData]);\r\n\r\n  return (\r\n     // Render a chart using the calculated data\r\n    <div className=\"card mb-4\">\r\n      <div className=\"card-header\">\r\n        <i className=\"fas fa-chart-pie me-1\"></i>\r\n        Task Status Chart\r\n      </div>\r\n      <div className=\"card-body\" style={{ height: '400px' }}>\r\n        <canvas ref={chartRef} id=\"doughnutChart\"></canvas>\r\n      </div>\r\n      <div className=\"card-footer small text-muted\">Updated yesterday at 11:59 PM</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dbarchart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,SAASA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,gBAAgB,GAAGR,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,IAAIE,QAAQ,CAACE,OAAO,EAAE;MAC9B;MACF;MACC;MACD,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;MACvB,MAAMC,cAAc,GAAGN,QAAQ,CAACO,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,WAAW,CAAC,CAACC,MAAM;MAClF,MAAMC,YAAY,GAAGN,UAAU,GAAGC,cAAc;MAEhD,MAAMM,GAAG,GAAGV,QAAQ,CAACE,OAAO,CAACS,UAAU,CAAC,IAAI,CAAC;MAC7C,MAAMC,IAAI,GAAG;QACXC,MAAM,EAAE,CAAC,cAAc,EAAE,gBAAgB,CAAC;QAC1CC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,MAAM;UACbH,IAAI,EAAE,CAACH,YAAY,EAAEL,cAAc,CAAC;UACpCY,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;UACvCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACD,MAAMC,MAAM,GAAG;QACbC,IAAI,EAAE,UAAU;QAChBP,IAAI,EAAEA,IAAI;QACVQ,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE;QACvB;MACF,CAAC;;MAED;MACArB,gBAAgB,CAACC,OAAO,GAAG,IAAIR,KAAK,CAACgB,GAAG,EAAEQ,MAAM,CAAC;IACnD;IAEA,OAAO,MAAM;MACX;MACA,IAAIjB,gBAAgB,CAACC,OAAO,EAAE;QAC5BD,gBAAgB,CAACC,OAAO,CAACqB,OAAO,CAAC,CAAC;MACpC;IACF,CAAC;EACH,CAAC,EAAE,CAACzB,QAAQ,CAAC,CAAC;EAEd;IAAA;IACG;IACDF,OAAA;MAAK4B,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB7B,OAAA;QAAK4B,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B7B,OAAA;UAAG4B,SAAS,EAAC;QAAuB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,qBAE3C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNjC,OAAA;QAAK4B,SAAS,EAAC,WAAW;QAACM,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAQ,CAAE;QAAAN,QAAA,eACpD7B,OAAA;UAAQoC,GAAG,EAAEhC,QAAS;UAACiC,EAAE,EAAC;QAAe;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eACNjC,OAAA;QAAK4B,SAAS,EAAC,8BAA8B;QAAAC,QAAA,EAAC;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E;EAAC;AAEV;AAAC9B,EAAA,CA3DQF,SAAS;AAAAqC,EAAA,GAATrC,SAAS;AA6DlB,eAAeA,SAAS;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}