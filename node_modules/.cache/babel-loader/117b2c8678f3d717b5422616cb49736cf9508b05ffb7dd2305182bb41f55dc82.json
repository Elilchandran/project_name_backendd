{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n\n// const useContent = () => {\n//     const [isAuthenticated, setIsAuthenticated] = useState(() => {\n//         // Get the authentication status from localStorage if available\n//         const auth = localStorage.getItem('isAuthenticated');\n//         return auth ? JSON.parse(auth) : false;\n//     });\n\n//     const handleLogin = async (email, password) => {\n//         try {\n//             const response = await fetch(\"http://localhost:3001/signin\", {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ email, password }),\n//             });\n\n//             if (response.ok) {\n//                 setIsAuthenticated(true);\n//                 localStorage.setItem('isAuthenticated', true); // Store authentication status in localStorage\n//             } else {\n//                 setIsAuthenticated(false);\n//                 localStorage.removeItem('isAuthenticated'); // Remove if the login fails\n//                 // You might want to show an error message here\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error);\n//         }\n//     };\n\n//     const handleLogout = () => {\n//         setIsAuthenticated(false);\n//         localStorage.removeItem('isAuthenticated'); // Remove the authentication status on logout\n//     };\n\n//     useEffect(() => {\n//         const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\n//         if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\n//             setIsAuthenticated(true);\n//         }\n//     }, []);\n\n//     return { isAuthenticated, handleLogin, handleLogout };\n// };\n\n// export default useContent;\n\nimport { useState, useEffect } from 'react';\nconst useContent = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    // Getting the authentication status from localStorage if available\n    const auth = localStorage.getItem('isAuthenticated');\n    return auth ? JSON.parse(auth) : false;\n  });\n  const handleLogin = async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:3001/signin\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        if (result.message === 'Sign-in successful') {\n          // Set the authentication status\n          setIsAuthenticated(true);\n          localStorage.setItem('isAuthenticated', true);\n\n          // Fetch the user's tasks after successful login\n          const userResponse = await fetch(`http://localhost:3001/tasks/${result.user._id}`);\n          if (userResponse.ok) {\n            const tasks = await userResponse.json();\n            // Update state or perform an action with the user's tasks\n            // For example, you could update state with the fetched tasks\n            setTasks(tasks); // Assuming you have a state variable for tasks\n          } else {\n            console.error('Error fetching user tasks');\n            // Handle the error when fetching tasks\n          }\n        } else {\n          console.error(\"Unexpected response:\", result.message);\n          // Perform an action or display an error to the user\n        }\n      } else {\n        console.error(\"HTTP error:\", response.status);\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        // Handle non-200 HTTP response status\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle any other unexpected error during the fetch\n      // Display an error message to the user\n    }\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    localStorage.removeItem('isAuthenticated'); // Remove the authentication status on logout\n  };\n\n  useEffect(() => {\n    const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\n    if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  return {\n    isAuthenticated,\n    handleLogin,\n    handleLogout\n  };\n};\n_s(useContent, \"ypNWdwpm3b7mIweTsaV9iMnP4Mc=\");\nexport default useContent;","map":{"version":3,"names":["useState","useEffect","useContent","_s","isAuthenticated","setIsAuthenticated","auth","localStorage","getItem","JSON","parse","handleLogin","email","password","response","fetch","method","headers","body","stringify","ok","result","json","message","setItem","userResponse","user","_id","tasks","setTasks","console","error","status","removeItem","handleLogout","storedIsAuthenticated"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/useContent.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\r\n\r\n// const useContent = () => {\r\n//     const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n//         // Get the authentication status from localStorage if available\r\n//         const auth = localStorage.getItem('isAuthenticated');\r\n//         return auth ? JSON.parse(auth) : false;\r\n//     });\r\n\r\n//     const handleLogin = async (email, password) => {\r\n//         try {\r\n//             const response = await fetch(\"http://localhost:3001/signin\", {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ email, password }),\r\n//             });\r\n    \r\n//             if (response.ok) {\r\n//                 setIsAuthenticated(true);\r\n//                 localStorage.setItem('isAuthenticated', true); // Store authentication status in localStorage\r\n//             } else {\r\n//                 setIsAuthenticated(false);\r\n//                 localStorage.removeItem('isAuthenticated'); // Remove if the login fails\r\n//                 // You might want to show an error message here\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error);\r\n//         }\r\n//     };\r\n    \r\n//     const handleLogout = () => {\r\n//         setIsAuthenticated(false);\r\n//         localStorage.removeItem('isAuthenticated'); // Remove the authentication status on logout\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\r\n//         if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\r\n//             setIsAuthenticated(true);\r\n//         }\r\n//     }, []);\r\n\r\n//     return { isAuthenticated, handleLogin, handleLogout };\r\n// };\r\n\r\n// export default useContent;\r\n\r\n\r\n\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useContent = () => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n        // Getting the authentication status from localStorage if available\r\n        const auth = localStorage.getItem('isAuthenticated');\r\n        return auth ? JSON.parse(auth) : false;\r\n    });\r\n\r\n    const handleLogin = async (email, password) => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:3001/signin\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const result = await response.json();\r\n    \r\n                if (result.message === 'Sign-in successful') {\r\n                    // Set the authentication status\r\n                    setIsAuthenticated(true);\r\n                    localStorage.setItem('isAuthenticated', true);\r\n    \r\n                    // Fetch the user's tasks after successful login\r\n                    const userResponse = await fetch(`http://localhost:3001/tasks/${result.user._id}`);\r\n    \r\n                    if (userResponse.ok) {\r\n                        const tasks = await userResponse.json();\r\n                        // Update state or perform an action with the user's tasks\r\n                        // For example, you could update state with the fetched tasks\r\n                        setTasks(tasks); // Assuming you have a state variable for tasks\r\n                    } else {\r\n                        console.error('Error fetching user tasks');\r\n                        // Handle the error when fetching tasks\r\n                    }\r\n                } else {\r\n                    console.error(\"Unexpected response:\", result.message);\r\n                    // Perform an action or display an error to the user\r\n                }\r\n            } else {\r\n                console.error(\"HTTP error:\", response.status);\r\n                setIsAuthenticated(false);\r\n                localStorage.removeItem('isAuthenticated');\r\n                // Handle non-200 HTTP response status\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            // Handle any other unexpected error during the fetch\r\n            // Display an error message to the user\r\n        }\r\n    };\r\n    \r\n    const handleLogout = () => {\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('isAuthenticated'); // Remove the authentication status on logout\r\n    };\r\n\r\n    useEffect(() => {\r\n        const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\r\n        if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    return { isAuthenticated, handleLogin, handleLogout };\r\n};\r\n\r\nexport default useContent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}