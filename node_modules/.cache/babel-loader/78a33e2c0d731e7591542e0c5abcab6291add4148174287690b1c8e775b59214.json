{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n\n// const useContent = () => {\n//     const [isAuthenticated, setIsAuthenticated] = useState(() => {\n//         // Get the authentication status from localStorage if available\n//         const auth = localStorage.getItem('isAuthenticated');\n//         return auth ? JSON.parse(auth) : false;\n//     });\n\n//     const handleLogin = async (email, password) => {\n//         try {\n//             const response = await fetch(\"http://localhost:3001/signin\", {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ email, password }),\n//             });\n\n//             if (response.ok) {\n//                 setIsAuthenticated(true);\n//                 localStorage.setItem('isAuthenticated', true); // Store authentication status in localStorage\n//             } else {\n//                 setIsAuthenticated(false);\n//                 localStorage.removeItem('isAuthenticated'); // Remove if the login fails\n//                 // You might want to show an error message here\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error);\n//         }\n//     };\n\n//     const handleLogout = () => {\n//         setIsAuthenticated(false);\n//         localStorage.removeItem('isAuthenticated'); // Remove the authentication status on logout\n//     };\n\n//     useEffect(() => {\n//         const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\n//         if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\n//             setIsAuthenticated(true);\n//         }\n//     }, []);\n\n//     return { isAuthenticated, handleLogin, handleLogout };\n// };\n\n// export default useContent;\n\nimport { useState, useEffect } from 'react';\nconst useContent = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const auth = localStorage.getItem('isAuthenticated');\n    return auth ? JSON.parse(auth) : false;\n  });\n  const [userId, setUserId] = useState(null); // State to hold the user ID\n\n  const handleLogin = async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:3001/signin\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        if (result.message === 'Sign-in successful') {\n          setIsAuthenticated(true);\n          localStorage.setItem('isAuthenticated', true);\n\n          // Retrieve user data after successful login\n          const userResponse = await fetch(\"http://localhost:3001/user\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email\n            })\n          });\n          if (userResponse.ok) {\n            const userData = await userResponse.json();\n            setUserId(userData.userId);\n          } else {\n            console.error(\"Failed to fetch user data\");\n          }\n        } else {\n          console.error(\"Unexpected response:\", result.message);\n        }\n      } else {\n        console.error(\"HTTP error:\", response.status);\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setUserId(null); // Clear the userId on logout\n    localStorage.removeItem('isAuthenticated');\n  };\n  useEffect(() => {\n    const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\n    if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  return {\n    isAuthenticated,\n    handleLogin,\n    handleLogout,\n    userId\n  }; // Return the userId as well\n};\n_s(useContent, \"gWRO34rsnMhurF0GZUrtBDqGECo=\");\nexport default useContent;","map":{"version":3,"names":["useState","useEffect","useContent","_s","isAuthenticated","setIsAuthenticated","auth","localStorage","getItem","JSON","parse","userId","setUserId","handleLogin","email","password","response","fetch","method","headers","body","stringify","ok","result","json","message","setItem","userResponse","userData","console","error","status","removeItem","handleLogout","storedIsAuthenticated"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/useContent.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\r\n\r\n// const useContent = () => {\r\n//     const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n//         // Get the authentication status from localStorage if available\r\n//         const auth = localStorage.getItem('isAuthenticated');\r\n//         return auth ? JSON.parse(auth) : false;\r\n//     });\r\n\r\n//     const handleLogin = async (email, password) => {\r\n//         try {\r\n//             const response = await fetch(\"http://localhost:3001/signin\", {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ email, password }),\r\n//             });\r\n    \r\n//             if (response.ok) {\r\n//                 setIsAuthenticated(true);\r\n//                 localStorage.setItem('isAuthenticated', true); // Store authentication status in localStorage\r\n//             } else {\r\n//                 setIsAuthenticated(false);\r\n//                 localStorage.removeItem('isAuthenticated'); // Remove if the login fails\r\n//                 // You might want to show an error message here\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error);\r\n//         }\r\n//     };\r\n    \r\n//     const handleLogout = () => {\r\n//         setIsAuthenticated(false);\r\n//         localStorage.removeItem('isAuthenticated'); // Remove the authentication status on logout\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\r\n//         if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\r\n//             setIsAuthenticated(true);\r\n//         }\r\n//     }, []);\r\n\r\n//     return { isAuthenticated, handleLogin, handleLogout };\r\n// };\r\n\r\n// export default useContent;\r\n\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useContent = () => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n        const auth = localStorage.getItem('isAuthenticated');\r\n        return auth ? JSON.parse(auth) : false;\r\n    });\r\n\r\n    const [userId, setUserId] = useState(null); // State to hold the user ID\r\n\r\n    const handleLogin = async (email, password) => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:3001/signin\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                if (result.message === 'Sign-in successful') {\r\n                    setIsAuthenticated(true);\r\n                    localStorage.setItem('isAuthenticated', true);\r\n\r\n                    // Retrieve user data after successful login\r\n                    const userResponse = await fetch(\"http://localhost:3001/user\", {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({ email }),\r\n                    });\r\n\r\n                    if (userResponse.ok) {\r\n                        const userData = await userResponse.json();\r\n                        setUserId(userData.userId);\r\n                    } else {\r\n                        console.error(\"Failed to fetch user data\");\r\n                    }\r\n                } else {\r\n                    console.error(\"Unexpected response:\", result.message);\r\n                }\r\n            } else {\r\n                console.error(\"HTTP error:\", response.status);\r\n                setIsAuthenticated(false);\r\n                localStorage.removeItem('isAuthenticated');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n        }\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        setIsAuthenticated(false);\r\n        setUserId(null); // Clear the userId on logout\r\n        localStorage.removeItem('isAuthenticated');\r\n    };\r\n\r\n    useEffect(() => {\r\n        const storedIsAuthenticated = localStorage.getItem('isAuthenticated');\r\n        if (storedIsAuthenticated && JSON.parse(storedIsAuthenticated) === true) {\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    return { isAuthenticated, handleLogin, handleLogout, userId }; // Return the userId as well\r\n};\r\n\r\nexport default useContent;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}