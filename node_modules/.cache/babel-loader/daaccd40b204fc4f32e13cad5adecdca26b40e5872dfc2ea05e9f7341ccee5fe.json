{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karthik\\\\Documents\\\\student_task\\\\student_portal\\\\src\\\\component\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Dashboard from './Dashboard/Dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const navigate = useNavigate();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const handleLogin = e => {\n    e.preventDefault();\n    // Perform your login logic here, such as validating user credentials\n    // For simplicity, a basic validation check is simulated here\n    const email = e.target[0].value; // Assuming the email input is the first input\n    const password = e.target[1].value; // Assuming the password input is the second input\n\n    // Simulated authentication - replace this with actual authentication logic\n    if (email === 'user@example.com' && password === 'password') {\n      setIsLoggedIn(true);\n      // Redirect to the Dashboard\n      navigate('/dashboard');\n    } else {\n      alert('Invalid credentials');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"GVHzGJnl+vLMWdf9aHFkM2Kljwg=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","useNavigate","Dashboard","jsxDEV","_jsxDEV","Login","_s","navigate","isLoggedIn","setIsLoggedIn","handleLogin","e","preventDefault","email","target","value","password","alert","className","children","onSubmit","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Karthik/Documents/student_task/student_portal/src/component/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Dashboard from './Dashboard/Dashboard';\r\n\r\nfunction Login() {\r\n  const navigate = useNavigate();\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    // Perform your login logic here, such as validating user credentials\r\n    // For simplicity, a basic validation check is simulated here\r\n    const email = e.target[0].value; // Assuming the email input is the first input\r\n    const password = e.target[1].value; // Assuming the password input is the second input\r\n\r\n    // Simulated authentication - replace this with actual authentication logic\r\n    if (email === 'user@example.com' && password === 'password') {\r\n      setIsLoggedIn(true);\r\n      // Redirect to the Dashboard\r\n      navigate('/dashboard');\r\n    } else {\r\n      alert('Invalid credentials');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white\">\r\n      {/* ... your other elements ... */}\r\n      <form onSubmit={handleLogin}>\r\n        {/* ... your form inputs ... */}\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMW,WAAW,GAAIC,CAAC,IAAK;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACA;IACA,MAAMC,KAAK,GAAGF,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;IACjC,MAAMC,QAAQ,GAAGL,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;;IAEpC;IACA,IAAIF,KAAK,KAAK,kBAAkB,IAAIG,QAAQ,KAAK,UAAU,EAAE;MAC3DP,aAAa,CAAC,IAAI,CAAC;MACnB;MACAF,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,MAAM;MACLU,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACEb,OAAA;IAAKc,SAAS,EAAC,UAAU;IAAAC,QAAA,eAEvBf,OAAA;MAAMgB,QAAQ,EAAEV,WAAY;MAAAS,QAAA,eAE1Bf,OAAA;QAAQiB,IAAI,EAAC,QAAQ;QAACH,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAElD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACnB,EAAA,CAhCQD,KAAK;EAAA,QACKJ,WAAW;AAAA;AAAAyB,EAAA,GADrBrB,KAAK;AAkCd,eAAeA,KAAK;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}